{"version":3,"sources":["components/State/StateData.js","components/Header/Header.js","components/Redux/HeaderAction.js","components/Redux/HeaderType.js","components/Chart/Chart.js","components/Redux/HeaderReducer.js","components/Redux/Store.js","App.js","serviceWorker.js","index.js"],"names":["StateDate","thousands_separators","num","num_parts","toString","split","replace","join","stats","this","props","status","shift","className","map","stat","state","confirmed","active","recovered","deaths","Component","Header","dispatch","useDispatch","headerState","useSelector","header","isConfirmedSelect","isActiveSelected","isRecoveredSelected","isDeathSelected","deltaconfirmed","deltarecovered","deltadeaths","id","onClick","type","payload","Chart","chartdata","data","indiaChartData","labels","datasets","totalConfimed","label","borderColor","pointBackgroundColor","hoverBorderColor","pointHoverRadius","totalDeaths","totalRecovered","chartData","i","length","chart","push","date","totalconfirmed","totaldeceased","totalrecovered","console","log","chartFunction","case_time","style","width","height","options","responsive","layout","padding","top","bottom","left","maintainAspectRatio","title","display","text","fontSize","legend","position","intialState","HeaderReducer","action","rootReducer","combineReducers","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","Alert","React","forwardRef","ref","elevation","variant","App","useState","loading","open","setState","openSucess","setOpenSucess","openError","setOpenError","useEffect","fetch","then","res","json","statewise","cases_time_series","catch","e","Box","sx","justifyContent","alignItems","CircularProgress","marginLeft","color","letterSpacing","Stack","spacing","Snackbar","autoHideDuration","onClose","severity","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a8f4e4ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./state.css\";\r\nclass StateDate extends Component {\r\n  thousands_separators = (num) => {\r\n    var num_parts = num.toString().split(\".\");\r\n    num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return num_parts.join(\".\");\r\n  };\r\n  render() {\r\n    const stats = this.props.status;\r\n    // console.log(stats);\r\n    stats.shift();\r\n    // console.log(stats);\r\n    return (\r\n      <div className=\"state-flex\">\r\n        <table className=\"Table\">\r\n          <tr className=\"state-heading\">\r\n            <th className=\"state-states start\">STATES/UT</th>\r\n            <th className=\"state-states\">CONFIRMED</th>\r\n            <th className=\"state-states\">ACTIVE</th>\r\n            <th className=\"state-states\"> RECOVERED</th>\r\n            <th className=\"state-states\">DEATHS</th>\r\n          </tr>\r\n          {stats.map((stat) => (\r\n            <tr>\r\n              <td className=\"state\">{stat.state}</td>\r\n              <td className=\"state flex-end\">\r\n                {this.thousands_separators(stat.confirmed)}\r\n              </td>\r\n              <td className=\"state flex-end\">\r\n                {this.thousands_separators(stat.active)}\r\n              </td>\r\n              <td className=\"state flex-end\">\r\n                {this.thousands_separators(stat.recovered)}\r\n              </td>\r\n              <td className=\"state flex-end\">\r\n                {this.thousands_separators(stat.deaths)}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StateDate;\r\n","import React, { Component } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  changeConfirmedStatus,\r\n  changeActiveStatus,\r\n  changeRecoveredStatus,\r\n  changeDeathStatus,\r\n} from \"../Redux/HeaderAction\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header(props) {\r\n  const thousands_separators = (num) => {\r\n    var num_parts = num.toString().split(\".\");\r\n    num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return num_parts.join(\".\");\r\n  };\r\n  const dispatch = useDispatch();\r\n  const headerState = useSelector((state) => state.header);\r\n  const isConfirmedSelect = headerState.isConfirmedSelect;\r\n  const isActiveSelected = headerState.isActiveSelected;\r\n  const isRecoveredSelected = headerState.isRecoveredSelected;\r\n  const isDeathSelected = headerState.isDeathSelected;\r\n  const confirmed = thousands_separators(props.confirmed);\r\n  const active = thousands_separators(props.active);\r\n  const recovered = thousands_separators(props.recovered);\r\n  const deaths = thousands_separators(props.deaths);\r\n  const deltaconfirmed =\r\n    \"[+ \" + thousands_separators(props.deltaconfirmed) + \"]\";\r\n  const deltarecovered =\r\n    \"[+ \" + thousands_separators(props.deltarecovered) + \"]\";\r\n  const deltadeaths = \"[+ \" + thousands_separators(props.deltadeaths) + \"]\";\r\n  // console.log(isConfirmedSelect);\r\n  return (\r\n    <div className=\"summary\">\r\n      <p\r\n        className=\"header-c\"\r\n        id={isConfirmedSelect ? \"selectedConf\" : \"\"}\r\n        onClick={() => dispatch(changeConfirmedStatus())}\r\n      >\r\n        Confirmed <p>{deltaconfirmed}</p>\r\n        <span className=\"confirmed\">{confirmed}</span>\r\n      </p>\r\n\r\n      <p\r\n        className=\"header-a\"\r\n        id={isActiveSelected ? \"selectedActiv\" : \"\"}\r\n        onClick={() => {\r\n          dispatch(changeActiveStatus());\r\n        }}\r\n      >\r\n        Active\r\n        <p>\r\n          <br />\r\n        </p>\r\n        <span className=\"active\">{active}</span>\r\n      </p>\r\n      <p\r\n        className=\"header-r\"\r\n        id={isRecoveredSelected ? \"selectedReco\" : \"\"}\r\n        onClick={() => {\r\n          dispatch(changeRecoveredStatus());\r\n        }}\r\n      >\r\n        Recovered<p>{deltarecovered}</p>\r\n        <span className=\"recovered\">{recovered}</span>\r\n      </p>\r\n      <p\r\n        className=\"header-d\"\r\n        id={isDeathSelected ? \"selectedDea\" : \"\"}\r\n        onClick={() => {\r\n          dispatch(changeDeathStatus());\r\n        }}\r\n      >\r\n        Deaths <p>{deltadeaths}</p>\r\n        <span className=\"deaths\">{deaths}</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import {\r\n  IS_ACTIVE_SELECTED,\r\n  IS_CONFIRMED_SELECTED,\r\n  IS_DEATH_SELECTED,\r\n  IS_RECOVERED_SELECTED,\r\n} from \"./HeaderType\";\r\n\r\nexport const changeConfirmedStatus = () => {\r\n  return {\r\n    type: IS_CONFIRMED_SELECTED,\r\n    payload: true,\r\n  };\r\n};\r\nexport const changeActiveStatus = () => {\r\n  return {\r\n    type: IS_ACTIVE_SELECTED,\r\n    payload: true,\r\n  };\r\n};\r\nexport const changeRecoveredStatus = () => {\r\n  return {\r\n    type: IS_RECOVERED_SELECTED,\r\n    payload: true,\r\n  };\r\n};\r\n\r\nexport const changeDeathStatus = () => {\r\n  return {\r\n    type: IS_DEATH_SELECTED,\r\n    payload: true,\r\n  };\r\n};\r\n","export const IS_CONFIRMED_SELECTED = \"IS_CONFIRMED_SELECTED\";\r\nexport const IS_ACTIVE_SELECTED = \"IS_ACTIVE_SELECTED\";\r\nexport const IS_RECOVERED_SELECTED = \"IS_RECOVERED_SELECTED\";\r\nexport const IS_DEATH_SELECTED = \"IS_DEATH_SELECTED\";\r\n","import React, { Component } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Line } from \"react-chartjs-2\";\r\n// import fetchIndiaData from \"./Fetched\";\r\n\r\nfunction Chart(props) {\r\n  const headerState = useSelector((state) => state.header);\r\n  const isConfirmedSelect = headerState.isConfirmedSelect;\r\n  const isActiveSelected = headerState.isActiveSelected;\r\n  const isRecoveredSelected = headerState.isRecoveredSelected;\r\n  const isDeathSelected = headerState.isDeathSelected;\r\n\r\n  const chartFunction = (chartdata) => {\r\n    let data = {\r\n      indiaChartData: {\r\n        labels: [],\r\n        datasets: [],\r\n      },\r\n    };\r\n\r\n    let totalConfimed = {\r\n      label: \"Total Confirmed Cases\",\r\n      data: [],\r\n      borderColor: \"rgb(255, 7, 58)\",\r\n      pointBackgroundColor: \"rgb(255, 7, 58)\",\r\n      hoverBorderColor: \"rgb(255, 7, 58)\",\r\n      pointHoverRadius: 5,\r\n    };\r\n\r\n    let totalDeaths = {\r\n      label: \"Total Deaths\",\r\n      data: [],\r\n      borderColor: \"rgba(200,200,200,0.6)\",\r\n      pointBackgroundColor: \"rgba(200, 200, 200, 1)\",\r\n      hoverBorderColor: \"rgba(230,230,230,1)\",\r\n      pointHoverRadius: 6,\r\n    };\r\n\r\n    let totalRecovered = {\r\n      label: \"Total Recovered\",\r\n      data: [],\r\n      borderColor: \"rgba(0,255,0, 0.6)\",\r\n      pointBackgroundColor: \"rgba(0, 255, 0, 0.8)\",\r\n      hoverBorderColor: \"rgba(0,255,0,0.9)\",\r\n      pointHoverRadius: 6,\r\n    };\r\n\r\n    var chartData = chartdata;\r\n    for (let i = 10; i < chartData.length; i += 2) {\r\n      var chart = chartData[i];\r\n      data.indiaChartData.labels.push(chart.date);\r\n      if (isConfirmedSelect) {\r\n        totalConfimed.data.push(chart.totalconfirmed);\r\n      }\r\n      if (isDeathSelected) {\r\n        totalDeaths.data.push(chart.totaldeceased);\r\n      }\r\n      if (isRecoveredSelected) {\r\n        totalRecovered.data.push(chart.totalrecovered);\r\n      }\r\n    }\r\n\r\n    data.indiaChartData.datasets.push(totalConfimed);\r\n    data.indiaChartData.datasets.push(totalDeaths);\r\n    data.indiaChartData.datasets.push(totalRecovered);\r\n\r\n    console.log(data);\r\n    return data.indiaChartData;\r\n  };\r\n\r\n  const confirmed = chartFunction(props.case_time);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <Line\r\n        data={confirmed}\r\n        width={650}\r\n        height={600}\r\n        options={{\r\n          responsive: true,\r\n          layout: {\r\n            padding: {\r\n              top: 32,\r\n              bottom: 32,\r\n              left: 10,\r\n            },\r\n          },\r\n          maintainAspectRatio: false,\r\n          title: {\r\n            display: true,\r\n            text: \"STATUS\",\r\n            fontSize: 25,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import {\r\n  IS_ACTIVE_SELECTED,\r\n  IS_CONFIRMED_SELECTED,\r\n  IS_DEATH_SELECTED,\r\n  IS_RECOVERED_SELECTED,\r\n} from \"./HeaderType\";\r\n\r\nconst intialState = {\r\n  isConfirmedSelect: true,\r\n  isActiveSelected: false,\r\n  isRecoveredSelected: false,\r\n  isDeathSelected: false,\r\n};\r\n\r\nconst HeaderReducer = (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case IS_CONFIRMED_SELECTED:\r\n      return {\r\n        isConfirmedSelect: true,\r\n        isActiveSelected: false,\r\n        isRecoveredSelected: false,\r\n        isDeathSelected: false,\r\n      };\r\n    case IS_ACTIVE_SELECTED:\r\n      return {\r\n        isConfirmedSelect: false,\r\n        isActiveSelected: true,\r\n        isRecoveredSelected: false,\r\n        isDeathSelected: false,\r\n      };\r\n    case IS_RECOVERED_SELECTED:\r\n      return {\r\n        isConfirmedSelect: false,\r\n        isActiveSelected: false,\r\n        isRecoveredSelected: true,\r\n        isDeathSelected: false,\r\n      };\r\n    case IS_DEATH_SELECTED:\r\n      return {\r\n        isConfirmedSelect: false,\r\n        isActiveSelected: false,\r\n        isRecoveredSelected: false,\r\n        isDeathSelected: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default HeaderReducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\n\r\nimport HeaderReducer from \"./HeaderReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  header: HeaderReducer,\r\n});\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancer()\r\n  // compose(),\r\n  // // applyMiddleware(sagaMiddleware),\r\n  // window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n// sagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport StateDate from \"./components/State/StateData\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Chart from \"./components/Chart/Chart\";\r\nimport axios from \"axios\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@mui/material/Alert\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { margin } from \"@mui/system\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./components/Redux/Store\";\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction App(props) {\r\n  const [state, setState] = useState({\r\n    loading: true,\r\n    status: [],\r\n    confirmed: \"\",\r\n    active: \"\",\r\n    recovered: \"\",\r\n    deaths: \"\",\r\n    deltaconfirmed: \"\",\r\n    deltarecovered: \"\",\r\n    deltadeaths: \"\",\r\n    case_time: [],\r\n    open: false,\r\n  });\r\n  const [openSucess, setOpenSucess] = useState(false);\r\n  const [openError, setOpenError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const data = fetch(\"https://covid-19api1.herokuapp.com\", {\r\n      // mode: \"cors\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        setState({\r\n          loading: false,\r\n          status: json.statewise,\r\n          confirmed: json.statewise[0].confirmed,\r\n          active: json.statewise[0].active,\r\n          recovered: json.statewise[0].recovered,\r\n          deaths: json.statewise[0].deaths,\r\n          deltaconfirmed: json.statewise[0].deltaconfirmed,\r\n          deltarecovered: json.statewise[0].deltarecovered,\r\n          deltadeaths: json.statewise[0].deltadeaths,\r\n          case_time: json.cases_time_series,\r\n          open: true,\r\n        });\r\n        setOpenSucess(true);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setState({ loading: false });\r\n        setOpenError(false);\r\n      });\r\n\r\n    return data;\r\n  }, []);\r\n\r\n  if (state.loading) {\r\n    return (\r\n      <div className=\"Loading\">\r\n        <Box\r\n          sx={{ display: \"flex\" }}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n          <h2\r\n            style={{\r\n              marginLeft: \"20px\",\r\n              color: \"white\",\r\n              letterSpacing: \"1px\",\r\n            }}\r\n          >\r\n            Loading Please Wait\r\n          </h2>\r\n        </Box>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Provider store={store}>\r\n        <div>\r\n          <h1 className=\"header\">COVID19-INDIA</h1>\r\n          {state.open ? (\r\n            <div className=\"flex\">\r\n              <div className=\"status\">\r\n                <Header\r\n                  confirmed={state.confirmed}\r\n                  active={state.active}\r\n                  recovered={state.recovered}\r\n                  deaths={state.deaths}\r\n                  deltaconfirmed={state.deltaconfirmed}\r\n                  deltarecovered={state.deltarecovered}\r\n                  deltadeaths={state.deltadeaths}\r\n                />\r\n                <StateDate status={state.status} />\r\n              </div>\r\n              <div className=\"chartDiv\">\r\n                <Chart case_time={state.case_time} />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"ErrorDoc\">No data Available</div>\r\n          )}\r\n\r\n          <Stack spacing={2}>\r\n            <Snackbar\r\n              open={openSucess}\r\n              // anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n              autoHideDuration={6000}\r\n              onClose={() => {\r\n                setOpenSucess(false);\r\n              }}\r\n            >\r\n              <Alert\r\n                onClose={() => {\r\n                  setOpenSucess(false);\r\n                }}\r\n                severity=\"success\"\r\n                sx={{ width: \"100%\" }}\r\n              >\r\n                Data Fetched Successfully\r\n              </Alert>\r\n            </Snackbar>\r\n\r\n            <Snackbar\r\n              open={openError}\r\n              // anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n              autoHideDuration={6000}\r\n              onClose={() => {\r\n                setState({ openError: false });\r\n              }}\r\n            >\r\n              <Alert\r\n                onClose={() => {\r\n                  setState({ openError: false });\r\n                }}\r\n                severity=\"error\"\r\n                sx={{ width: \"100%\" }}\r\n              >\r\n                Enable to Fetch the Data\r\n              </Alert>\r\n            </Snackbar>\r\n          </Stack>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}