{"version":3,"sources":["components/State/StateData.js","components/Header/Header.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["StateDate","stats","this","props","status","shift","className","map","stat","state","confirmed","active","recovered","deaths","Component","Header","thousands_separators","num","num_parts","toString","split","replace","join","deltaconfirmed","deltarecovered","deltadeaths","Chart","chartFunction","chartdata","data","indiaChartData","labels","datasets","totalConfimed","label","borderColor","pointBackgroundColor","hoverBorderColor","pointHoverRadius","totalDeaths","totalRecovered","chartData","i","length","chart","push","date","totalconfirmed","totaldeceased","totalrecovered","console","log","case_time","width","height","options","responsive","layout","padding","top","bottom","left","maintainAspectRatio","title","display","text","fontSize","legend","position","App","fetch","then","res","json","setState","statewise","cases_time_series","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03ec8cb8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./state.css\";\nclass StateDate extends Component {\n  render() {\n    const stats = this.props.status;\n    // console.log(stats);\n    stats.shift();\n    // console.log(stats);\n    return (\n      <div className=\"state-flex\">\n        <ul>\n          <p className=\"head-p\">States</p>\n          {stats.map((stat) => (\n            <div className=\"div-state\">{stat.state}</div>\n          ))}\n        </ul>\n\n        <ul>\n          <p className=\"head-p\">Confirmed</p>\n          {stats.map((stat) => (\n            <div className=\"div-state\">{stat.confirmed}</div>\n          ))}\n        </ul>\n\n        <ul>\n          <p className=\"head-p\">Active</p>\n          {stats.map((stat) => (\n            <div className=\"div-state\">{stat.active}</div>\n          ))}\n        </ul>\n\n        <ul>\n          <p className=\"head-p\">Recovered</p>\n          {stats.map((stat) => (\n            <div className=\"div-state\">{stat.recovered}</div>\n          ))}\n        </ul>\n\n        <ul>\n          <p className=\"head-p\">Deaths</p>\n          {stats.map((stat) => (\n            <div className=\"div-state\">{stat.deaths}</div>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default StateDate;\n","import React, { Component } from \"react\";\nimport \"./Header.css\";\nclass Header extends Component {\n  thousands_separators = (num) => {\n    var num_parts = num.toString().split(\".\");\n    num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return num_parts.join(\".\");\n  };\n\n  render() {\n    const confirmed = this.thousands_separators(this.props.confirmed);\n    const active = this.thousands_separators(this.props.active);\n    const recovered = this.thousands_separators(this.props.recovered);\n    const deaths = this.thousands_separators(this.props.deaths);\n    const deltaconfirmed = \"[+ \" + this.props.deltaconfirmed + \"]\";\n    const deltarecovered = \"[+ \" + this.props.deltarecovered + \"]\";\n    const deltadeaths = \"[+ \" + this.props.deltadeaths + \"]\";\n    // console.log(deltaconfirmed);\n    return (\n      <div className=\"summary\">\n        <p className=\"header-c\">\n          CONFIRMED CASE :<p>{deltaconfirmed}</p>\n          <span className=\"confirmed\">{confirmed}</span>\n        </p>\n\n        <p className=\"header-a\">\n          ACTIVE CASE :\n          <p>\n            <br />\n          </p>\n          <span className=\"active\">{active}</span>\n        </p>\n        <p className=\"header-r\">\n          RECOVERED CASE :<p>{deltarecovered}</p>\n          <span className=\"recovered\">{recovered}</span>\n        </p>\n        <p className=\"header-d\">\n          DEATHS CASE : <p>{deltadeaths}</p>\n          <span className=\"deaths\">{deaths}</span>\n        </p>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n// import fetchIndiaData from \"./Fetched\";\nclass Chart extends Component {\n  chartFunction = (chartdata) => {\n    let data = {\n      indiaChartData: {\n        labels: [],\n        datasets: [],\n      },\n    };\n    let totalConfimed = {\n      label: \"Total Confirmed Cases\",\n      data: [],\n      borderColor: \"rgb(255, 7, 58)\",\n      pointBackgroundColor: \"rgb(255, 7, 58)\",\n      hoverBorderColor: \"rgb(255, 7, 58)\",\n      pointHoverRadius: 5,\n    };\n    let totalDeaths = {\n      label: \"Total Deaths\",\n      data: [],\n      borderColor: \"rgba(200,200,200,0.6)\",\n      pointBackgroundColor: \"rgba(200, 200, 200, 1)\",\n      hoverBorderColor: \"rgba(230,230,230,1)\",\n      pointHoverRadius: 6,\n    };\n\n    let totalRecovered = {\n      label: \"Total Recovered\",\n      data: [],\n      borderColor: \"rgba(0,255,0, 0.6)\",\n      pointBackgroundColor: \"rgba(0, 255, 0, 0.8)\",\n      hoverBorderColor: \"rgba(0,255,0,0.9)\",\n      pointHoverRadius: 6,\n    };\n\n    var chartData = chartdata;\n    for (let i = 10; i < chartData.length; i += 2) {\n      var chart = chartData[i];\n      data.indiaChartData.labels.push(chart.date);\n\n      totalConfimed.data.push(chart.totalconfirmed);\n      totalDeaths.data.push(chart.totaldeceased);\n      totalRecovered.data.push(chart.totalrecovered);\n    }\n\n    data.indiaChartData.datasets.push(totalConfimed);\n    data.indiaChartData.datasets.push(totalDeaths);\n    data.indiaChartData.datasets.push(totalRecovered);\n\n    console.log(data);\n    return data.indiaChartData;\n  };\n  render() {\n    var confirmed = this.chartFunction(this.props.case_time);\n    // console.log(this.props.case_time);\n    // var data = fetchIndiaData();\n    // console.log(this.state.charData);\n    return (\n      <div>\n        <Line\n          data={confirmed}\n          width={650}\n          height={400}\n          options={{\n            responsive: true,\n            layout: {\n              padding: {\n                top: 32,\n                bottom: 32,\n                left: 52,\n              },\n            },\n            maintainAspectRatio: false,\n            title: {\n              display: true,\n              text: \"STATUS\",\n              fontSize: 25,\n            },\n            legend: {\n              display: true,\n              position: \"top\",\n            },\n          }}\n        />\n        {/* <Line\n          data={data}\n          width={750}\n          height={400}\n          options={{\n            responsive: true,\n            layout: {\n              padding: {\n                top: 32,\n                bottom: 32,\n              },\n            },\n            title: {\n              display: true,\n              text: \"Confirmed Cases\",\n              fontSize: 25,\n            },\n            legend: {\n              display: true,\n              position: \"top\",\n            },\n          }}\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport StateDate from \"./components/State/StateData\";\nimport Header from \"./components/Header/Header\";\nimport Chart from \"./components/Chart/Chart\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      status: [],\n      confirmed: \"\",\n      active: \"\",\n      recovered: \"\",\n      deaths: \"\",\n      deltaconfirmed: \"\",\n      deltarecovered: \"\",\n      deltadeaths: \"\",\n      case_time: [],\n    };\n  }\n  async componentDidMount() {\n    const data = await fetch(\"https://api.covid19india.org/data.json\")\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          status: json.statewise,\n          confirmed: json.statewise[0].confirmed,\n          active: json.statewise[0].active,\n          recovered: json.statewise[0].recovered,\n          deaths: json.statewise[0].deaths,\n          deltaconfirmed: json.statewise[0].deltaconfirmed,\n          deltarecovered: json.statewise[0].deltarecovered,\n          deltadeaths: json.statewise[0].deltadeaths,\n          case_time: json.cases_time_series,\n        });\n      });\n    return data;\n    // console.log(data);\n  }\n\n  render() {\n    const stats = this.state.status;\n\n    if (stats === null) {\n      return <p>Loadiing...</p>;\n    } else {\n      return (\n        <div>\n          <h1 className=\"header\">COVID19-INDIA</h1>\n          <div className=\"flex\">\n            <div className=\"status\">\n              <Header\n                confirmed={this.state.confirmed}\n                active={this.state.active}\n                recovered={this.state.recovered}\n                deaths={this.state.deaths}\n                deltaconfirmed={this.state.deltaconfirmed}\n                deltarecovered={this.state.deltarecovered}\n                deltadeaths={this.state.deltadeaths}\n              />\n              <StateDate status={this.state.status} />\n            </div>\n            <div>\n              <Chart case_time={this.state.case_time} />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}