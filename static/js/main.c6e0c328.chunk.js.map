{"version":3,"sources":["components/State/StateData.js","components/Header/Header.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["StateDate","stats","this","props","status","shift","className","map","stat","state","confirmed","active","recovered","deaths","Component","Header","thousands_separators","num","num_parts","toString","split","replace","join","deltaconfirmed","deltarecovered","deltadeaths","Chart","chartFunction","chartdata","data","indiaChartData","labels","datasets","totalConfimed","label","borderColor","pointBackgroundColor","hoverBorderColor","pointHoverRadius","totalDeaths","totalRecovered","chartData","i","length","chart","push","date","totalconfirmed","totaldeceased","totalrecovered","console","log","case_time","width","height","options","responsive","layout","padding","top","bottom","left","maintainAspectRatio","title","display","text","fontSize","legend","position","App","fetch","then","res","json","setState","statewise","cases_time_series","catch","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c6e0c328.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./state.css\";\r\nclass StateDate extends Component {\r\n  render() {\r\n    const stats = this.props.status;\r\n    // console.log(stats);\r\n    stats.shift();\r\n    // console.log(stats);\r\n    return (\r\n      <div className=\"state-flex\">\r\n        <table className=\"Table\">\r\n          <tr className=\"state-heading\">\r\n            <th className=\"state-states start\">STATES/UT</th>\r\n            <th className=\"state-states\">CONFIRMED</th>\r\n            <th className=\"state-states\">ACTIVE</th>\r\n            <th className=\"state-states\"> RECOVERED</th>\r\n            <th className=\"state-states\">DEATHS</th>\r\n          </tr>\r\n          {stats.map((stat) => (\r\n            <tr>\r\n              <td className=\"state\">{stat.state}</td>\r\n              <td className=\"state flex-end\">{stat.confirmed}</td>\r\n              <td className=\"state flex-end\">{stat.active}</td>\r\n              <td className=\"state flex-end\">{stat.recovered}</td>\r\n              <td className=\"state flex-end\">{stat.deaths}</td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StateDate;\r\n","import React, { Component } from \"react\";\r\nimport \"./Header.css\";\r\nclass Header extends Component {\r\n  thousands_separators = (num) => {\r\n    var num_parts = num.toString().split(\".\");\r\n    num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return num_parts.join(\".\");\r\n  };\r\n\r\n  render() {\r\n    const confirmed = this.thousands_separators(this.props.confirmed);\r\n    const active = this.thousands_separators(this.props.active);\r\n    const recovered = this.thousands_separators(this.props.recovered);\r\n    const deaths = this.thousands_separators(this.props.deaths);\r\n    const deltaconfirmed = \"[+ \" + this.props.deltaconfirmed + \"]\";\r\n    const deltarecovered = \"[+ \" + this.props.deltarecovered + \"]\";\r\n    const deltadeaths = \"[+ \" + this.props.deltadeaths + \"]\";\r\n    // console.log(deltaconfirmed);\r\n    return (\r\n      <div className=\"summary\">\r\n        <p className=\"header-c\">\r\n          CONFIRMED <p>{deltaconfirmed}</p>\r\n          <span className=\"confirmed\">{confirmed}</span>\r\n        </p>\r\n\r\n        <p className=\"header-a\">\r\n          ACTIVE\r\n          <p>\r\n            <br />\r\n          </p>\r\n          <span className=\"active\">{active}</span>\r\n        </p>\r\n        <p className=\"header-r\">\r\n          RECOVERED<p>{deltarecovered}</p>\r\n          <span className=\"recovered\">{recovered}</span>\r\n        </p>\r\n        <p className=\"header-d\">\r\n          DEATHS <p>{deltadeaths}</p>\r\n          <span className=\"deaths\">{deaths}</span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n// import fetchIndiaData from \"./Fetched\";\r\nclass Chart extends Component {\r\n  chartFunction = (chartdata) => {\r\n    let data = {\r\n      indiaChartData: {\r\n        labels: [],\r\n        datasets: [],\r\n      },\r\n    };\r\n    let totalConfimed = {\r\n      label: \"Total Confirmed Cases\",\r\n      data: [],\r\n      borderColor: \"rgb(255, 7, 58)\",\r\n      pointBackgroundColor: \"rgb(255, 7, 58)\",\r\n      hoverBorderColor: \"rgb(255, 7, 58)\",\r\n      pointHoverRadius: 5,\r\n    };\r\n    let totalDeaths = {\r\n      label: \"Total Deaths\",\r\n      data: [],\r\n      borderColor: \"rgba(200,200,200,0.6)\",\r\n      pointBackgroundColor: \"rgba(200, 200, 200, 1)\",\r\n      hoverBorderColor: \"rgba(230,230,230,1)\",\r\n      pointHoverRadius: 6,\r\n    };\r\n\r\n    let totalRecovered = {\r\n      label: \"Total Recovered\",\r\n      data: [],\r\n      borderColor: \"rgba(0,255,0, 0.6)\",\r\n      pointBackgroundColor: \"rgba(0, 255, 0, 0.8)\",\r\n      hoverBorderColor: \"rgba(0,255,0,0.9)\",\r\n      pointHoverRadius: 6,\r\n    };\r\n\r\n    var chartData = chartdata;\r\n    for (let i = 10; i < chartData.length; i += 2) {\r\n      var chart = chartData[i];\r\n      data.indiaChartData.labels.push(chart.date);\r\n\r\n      totalConfimed.data.push(chart.totalconfirmed);\r\n      totalDeaths.data.push(chart.totaldeceased);\r\n      totalRecovered.data.push(chart.totalrecovered);\r\n    }\r\n\r\n    data.indiaChartData.datasets.push(totalConfimed);\r\n    data.indiaChartData.datasets.push(totalDeaths);\r\n    data.indiaChartData.datasets.push(totalRecovered);\r\n\r\n    console.log(data);\r\n    return data.indiaChartData;\r\n  };\r\n  render() {\r\n    var confirmed = this.chartFunction(this.props.case_time);\r\n    // console.log(this.props.case_time);\r\n    // var data = fetchIndiaData();\r\n    // console.log(this.state.charData);\r\n    return (\r\n      <div>\r\n        <Line\r\n          data={confirmed}\r\n          width={650}\r\n          height={400}\r\n          options={{\r\n            responsive: true,\r\n            layout: {\r\n              padding: {\r\n                top: 32,\r\n                bottom: 32,\r\n                left: 10,\r\n              },\r\n            },\r\n            maintainAspectRatio: false,\r\n            title: {\r\n              display: true,\r\n              text: \"STATUS\",\r\n              fontSize: 25,\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"top\",\r\n            },\r\n          }}\r\n        />\r\n        {/* <Line\r\n          data={data}\r\n          width={750}\r\n          height={400}\r\n          options={{\r\n            responsive: true,\r\n            layout: {\r\n              padding: {\r\n                top: 32,\r\n                bottom: 32,\r\n              },\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: \"Confirmed Cases\",\r\n              fontSize: 25,\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"top\",\r\n            },\r\n          }}\r\n        /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport StateDate from \"./components/State/StateData\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Chart from \"./components/Chart/Chart\";\r\nimport axios from \"axios\";\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      status: [],\r\n      confirmed: \"\",\r\n      active: \"\",\r\n      recovered: \"\",\r\n      deaths: \"\",\r\n      deltaconfirmed: \"\",\r\n      deltarecovered: \"\",\r\n      deltadeaths: \"\",\r\n      case_time: [],\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    const data = await fetch(\r\n      \"https://cors-anywhere.herokuapp.com/https://api.covid19india.org/data.json\"\r\n    )\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          status: json.statewise,\r\n          confirmed: json.statewise[0].confirmed,\r\n          active: json.statewise[0].active,\r\n          recovered: json.statewise[0].recovered,\r\n          deaths: json.statewise[0].deaths,\r\n          deltaconfirmed: json.statewise[0].deltaconfirmed,\r\n          deltarecovered: json.statewise[0].deltarecovered,\r\n          deltadeaths: json.statewise[0].deltadeaths,\r\n          case_time: json.cases_time_series,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n\r\n    return data;\r\n    // console.log(data);\r\n  }\r\n\r\n  render() {\r\n    const stats = this.state.status;\r\n\r\n    if (stats === null) {\r\n      return <p>Loadiing...</p>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h1 className=\"header\">COVID19-INDIA</h1>\r\n          <div className=\"flex\">\r\n            <div className=\"status\">\r\n              <Header\r\n                confirmed={this.state.confirmed}\r\n                active={this.state.active}\r\n                recovered={this.state.recovered}\r\n                deaths={this.state.deaths}\r\n                deltaconfirmed={this.state.deltaconfirmed}\r\n                deltarecovered={this.state.deltarecovered}\r\n                deltadeaths={this.state.deltadeaths}\r\n              />\r\n              <StateDate status={this.state.status} />\r\n            </div>\r\n            <div>\r\n              <Chart case_time={this.state.case_time} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}